//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var firstName: String?
    public var lastName: String?
    public var alias: String?
    public var imageId: String?
    public var email: String?
    public var creator: String?
    public var lastLogin: String?
    public var active: Bool?
    public var admin: Bool?
    public var protected: Bool?
    public var verified: Bool?
    public var enable2fa: Bool?
    public var secret2fa: String?
    public var token2fa: String?
    public var auth: String?
    public var resetToken: String?
    public var resetTokenExpire: String?
    public var refreshToken: String?
    public var refreshTokenExpire: String?
    public var registerToken: String?
    public var registerTokenExpire: String?
    public var changeToEmail: String?
    public var updatedAt: String?

    public init(id: String? = nil, firstName: String? = nil, lastName: String? = nil, alias: String? = nil, imageId: String? = nil, email: String? = nil, creator: String? = nil, lastLogin: String? = nil, active: Bool? = nil, admin: Bool? = nil, protected: Bool? = nil, verified: Bool? = nil, enable2fa: Bool? = nil, secret2fa: String? = nil, token2fa: String? = nil, auth: String? = nil, resetToken: String? = nil, resetTokenExpire: String? = nil, refreshToken: String? = nil, refreshTokenExpire: String? = nil, registerToken: String? = nil, registerTokenExpire: String? = nil, changeToEmail: String? = nil, updatedAt: String? = nil) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.alias = alias
        self.imageId = imageId
        self.email = email
        self.creator = creator
        self.lastLogin = lastLogin
        self.active = active
        self.admin = admin
        self.protected = protected
        self.verified = verified
        self.enable2fa = enable2fa
        self.secret2fa = secret2fa
        self.token2fa = token2fa
        self.auth = auth
        self.resetToken = resetToken
        self.resetTokenExpire = resetTokenExpire
        self.refreshToken = refreshToken
        self.refreshTokenExpire = refreshTokenExpire
        self.registerToken = registerToken
        self.registerTokenExpire = registerTokenExpire
        self.changeToEmail = changeToEmail
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName
        case lastName
        case alias
        case imageId
        case email
        case creator
        case lastLogin
        case active
        case admin
        case protected
        case verified
        case enable2fa
        case secret2fa
        case token2fa
        case auth
        case resetToken
        case resetTokenExpire
        case refreshToken
        case refreshTokenExpire
        case registerToken
        case registerTokenExpire
        case changeToEmail
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(alias, forKey: .alias)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(admin, forKey: .admin)
        try container.encodeIfPresent(protected, forKey: .protected)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encodeIfPresent(enable2fa, forKey: .enable2fa)
        try container.encodeIfPresent(secret2fa, forKey: .secret2fa)
        try container.encodeIfPresent(token2fa, forKey: .token2fa)
        try container.encodeIfPresent(auth, forKey: .auth)
        try container.encodeIfPresent(resetToken, forKey: .resetToken)
        try container.encodeIfPresent(resetTokenExpire, forKey: .resetTokenExpire)
        try container.encodeIfPresent(refreshToken, forKey: .refreshToken)
        try container.encodeIfPresent(refreshTokenExpire, forKey: .refreshTokenExpire)
        try container.encodeIfPresent(registerToken, forKey: .registerToken)
        try container.encodeIfPresent(registerTokenExpire, forKey: .registerTokenExpire)
        try container.encodeIfPresent(changeToEmail, forKey: .changeToEmail)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

