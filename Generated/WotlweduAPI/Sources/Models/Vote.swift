//
// Vote.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Vote: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var electionId: String?
    public var userId: String?
    public var itemId: String?
    public var statusId: Int?
    public var creator: String?
    public var createdAt: String?
    public var updatedAt: String?

    public init(id: String? = nil, electionId: String? = nil, userId: String? = nil, itemId: String? = nil, statusId: Int? = nil, creator: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.id = id
        self.electionId = electionId
        self.userId = userId
        self.itemId = itemId
        self.statusId = statusId
        self.creator = creator
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case electionId
        case userId
        case itemId
        case statusId
        case creator
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(electionId, forKey: .electionId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(statusId, forKey: .statusId)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

