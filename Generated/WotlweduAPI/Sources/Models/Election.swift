//
// Election.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Election: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var name: String?
    public var description: String?
    public var text: String?
    public var listId: String?
    public var imageId: String?
    public var electionType: Int?
    public var expiration: String?
    public var groupId: String?
    public var categoryId: String?
    public var statusId: Int?
    public var creator: String?
    public var updatedAt: String?

    public init(id: String? = nil, name: String? = nil, description: String? = nil, text: String? = nil, listId: String? = nil, imageId: String? = nil, electionType: Int? = nil, expiration: String? = nil, groupId: String? = nil, categoryId: String? = nil, statusId: Int? = nil, creator: String? = nil, updatedAt: String? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.text = text
        self.listId = listId
        self.imageId = imageId
        self.electionType = electionType
        self.expiration = expiration
        self.groupId = groupId
        self.categoryId = categoryId
        self.statusId = statusId
        self.creator = creator
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case text
        case listId
        case imageId
        case electionType
        case expiration
        case groupId
        case categoryId
        case statusId
        case creator
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(listId, forKey: .listId)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(electionType, forKey: .electionType)
        try container.encodeIfPresent(expiration, forKey: .expiration)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(statusId, forKey: .statusId)
        try container.encodeIfPresent(creator, forKey: .creator)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

