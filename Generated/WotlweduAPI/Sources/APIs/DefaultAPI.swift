//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     DELETE /capability/:capId
     
     - parameter capId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func capabilityCapIdDelete(capId: String) async throws {
        return try await capabilityCapIdDeleteWithRequestBuilder(capId: capId).execute().body
    }

    /**
     DELETE /capability/:capId
     - DELETE /capability/:capId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter capId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func capabilityCapIdDeleteWithRequestBuilder(capId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/capability/:capId"
        let capIdPreEscape = "\(APIHelper.mapValueToPathItem(capId))"
        let capIdPostEscape = capIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{capId}", with: capIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /capability/:capId
     
     - parameter capId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func capabilityCapIdGet(capId: String) async throws {
        return try await capabilityCapIdGetWithRequestBuilder(capId: capId).execute().body
    }

    /**
     GET /capability/:capId
     - GET /capability/:capId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter capId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func capabilityCapIdGetWithRequestBuilder(capId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/capability/:capId"
        let capIdPreEscape = "\(APIHelper.mapValueToPathItem(capId))"
        let capIdPostEscape = capIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{capId}", with: capIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /capability/:capId
     
     - parameter capId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func capabilityCapIdPost(capId: String, requestBody: [String: AnyCodable]) async throws {
        return try await capabilityCapIdPostWithRequestBuilder(capId: capId, requestBody: requestBody).execute().body
    }

    /**
     POST /capability/:capId
     - POST /capability/:capId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter capId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func capabilityCapIdPostWithRequestBuilder(capId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/capability/:capId"
        let capIdPreEscape = "\(APIHelper.mapValueToPathItem(capId))"
        let capIdPostEscape = capIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{capId}", with: capIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /capability/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func capabilityGet() async throws {
        return try await capabilityGetWithRequestBuilder().execute().body
    }

    /**
     GET /capability/
     - GET /capability/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func capabilityGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/capability/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /capability/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func capabilityPut(requestBody: [String: AnyCodable]) async throws {
        return try await capabilityPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /capability/
     - PUT /capability/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func capabilityPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/capability/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /cast/:voteId/:decision
     
     - parameter voteId: (path)  
     - parameter decision: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func castVoteIdDecisionGet(voteId: String, decision: String) async throws {
        return try await castVoteIdDecisionGetWithRequestBuilder(voteId: voteId, decision: decision).execute().body
    }

    /**
     GET /cast/:voteId/:decision
     - GET /cast/:voteId/:decision
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter voteId: (path)  
     - parameter decision: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func castVoteIdDecisionGetWithRequestBuilder(voteId: String, decision: String) -> RequestBuilder<Void> {
        var localVariablePath = "/cast/:voteId/:decision"
        let voteIdPreEscape = "\(APIHelper.mapValueToPathItem(voteId))"
        let voteIdPostEscape = voteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{voteId}", with: voteIdPostEscape, options: .literal, range: nil)
        let decisionPreEscape = "\(APIHelper.mapValueToPathItem(decision))"
        let decisionPostEscape = decisionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{decision}", with: decisionPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /category/:categoryId
     
     - parameter categoryId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryCategoryIdDelete(categoryId: String) async throws {
        return try await categoryCategoryIdDeleteWithRequestBuilder(categoryId: categoryId).execute().body
    }

    /**
     DELETE /category/:categoryId
     - DELETE /category/:categoryId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter categoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func categoryCategoryIdDeleteWithRequestBuilder(categoryId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/category/:categoryId"
        let categoryIdPreEscape = "\(APIHelper.mapValueToPathItem(categoryId))"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /category/:categoryId
     
     - parameter categoryId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryCategoryIdGet(categoryId: String) async throws {
        return try await categoryCategoryIdGetWithRequestBuilder(categoryId: categoryId).execute().body
    }

    /**
     GET /category/:categoryId
     - GET /category/:categoryId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter categoryId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func categoryCategoryIdGetWithRequestBuilder(categoryId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/category/:categoryId"
        let categoryIdPreEscape = "\(APIHelper.mapValueToPathItem(categoryId))"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /category/:categoryId
     
     - parameter categoryId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryCategoryIdPost(categoryId: String, requestBody: [String: AnyCodable]) async throws {
        return try await categoryCategoryIdPostWithRequestBuilder(categoryId: categoryId, requestBody: requestBody).execute().body
    }

    /**
     POST /category/:categoryId
     - POST /category/:categoryId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter categoryId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func categoryCategoryIdPostWithRequestBuilder(categoryId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/category/:categoryId"
        let categoryIdPreEscape = "\(APIHelper.mapValueToPathItem(categoryId))"
        let categoryIdPostEscape = categoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{categoryId}", with: categoryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /category/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryGet() async throws {
        return try await categoryGetWithRequestBuilder().execute().body
    }

    /**
     GET /category/
     - GET /category/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func categoryGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/category/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /category/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func categoryPut(requestBody: [String: AnyCodable]) async throws {
        return try await categoryPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /category/
     - PUT /category/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func categoryPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/category/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /election/:electionId
     
     - parameter electionId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdDelete(electionId: String) async throws {
        return try await electionElectionIdDeleteWithRequestBuilder(electionId: electionId).execute().body
    }

    /**
     DELETE /election/:electionId
     - DELETE /election/:electionId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdDeleteWithRequestBuilder(electionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /election/:electionId
     
     - parameter electionId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdGet(electionId: String) async throws {
        return try await electionElectionIdGetWithRequestBuilder(electionId: electionId).execute().body
    }

    /**
     GET /election/:electionId
     - GET /election/:electionId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdGetWithRequestBuilder(electionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /election/:electionId
     
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdPost(electionId: String, requestBody: [String: AnyCodable]) async throws {
        return try await electionElectionIdPostWithRequestBuilder(electionId: electionId, requestBody: requestBody).execute().body
    }

    /**
     POST /election/:electionId
     - POST /election/:electionId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdPostWithRequestBuilder(electionId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /election/:electionId/start
     
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdStartPut(electionId: String, requestBody: [String: AnyCodable]) async throws {
        return try await electionElectionIdStartPutWithRequestBuilder(electionId: electionId, requestBody: requestBody).execute().body
    }

    /**
     PUT /election/:electionId/start
     - PUT /election/:electionId/start
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdStartPutWithRequestBuilder(electionId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId/start"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /election/:electionId/stats
     
     - parameter electionId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdStatsGet(electionId: String) async throws {
        return try await electionElectionIdStatsGetWithRequestBuilder(electionId: electionId).execute().body
    }

    /**
     GET /election/:electionId/stats
     - GET /election/:electionId/stats
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdStatsGetWithRequestBuilder(electionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId/stats"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /election/:electionId/stop
     
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionElectionIdStopPut(electionId: String, requestBody: [String: AnyCodable]) async throws {
        return try await electionElectionIdStopPutWithRequestBuilder(electionId: electionId, requestBody: requestBody).execute().body
    }

    /**
     PUT /election/:electionId/stop
     - PUT /election/:electionId/stop
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionElectionIdStopPutWithRequestBuilder(electionId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/election/:electionId/stop"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /election/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionGet() async throws {
        return try await electionGetWithRequestBuilder().execute().body
    }

    /**
     GET /election/
     - GET /election/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func electionGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/election/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /election/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func electionPut(requestBody: [String: AnyCodable]) async throws {
        return try await electionPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /election/
     - PUT /election/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func electionPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/election/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /group/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGet() async throws {
        return try await groupGetWithRequestBuilder().execute().body
    }

    /**
     GET /group/
     - GET /group/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func groupGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/group/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /group/:groupId/bulkuseradd
     
     - parameter groupId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdBulkuseraddPut(groupId: String, user: User) async throws {
        return try await groupGroupIdBulkuseraddPutWithRequestBuilder(groupId: groupId, user: user).execute().body
    }

    /**
     PUT /group/:groupId/bulkuseradd
     - PUT /group/:groupId/bulkuseradd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdBulkuseraddPutWithRequestBuilder(groupId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId/bulkuseradd"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /group/:groupId/bulkuserdel
     
     - parameter groupId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdBulkuserdelPut(groupId: String, user: User) async throws {
        return try await groupGroupIdBulkuserdelPutWithRequestBuilder(groupId: groupId, user: user).execute().body
    }

    /**
     PUT /group/:groupId/bulkuserdel
     - PUT /group/:groupId/bulkuserdel
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdBulkuserdelPutWithRequestBuilder(groupId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId/bulkuserdel"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /group/:groupId
     
     - parameter groupId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdDelete(groupId: String) async throws {
        return try await groupGroupIdDeleteWithRequestBuilder(groupId: groupId).execute().body
    }

    /**
     DELETE /group/:groupId
     - DELETE /group/:groupId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdDeleteWithRequestBuilder(groupId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /group/:groupId
     
     - parameter groupId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdGet(groupId: String) async throws {
        return try await groupGroupIdGetWithRequestBuilder(groupId: groupId).execute().body
    }

    /**
     GET /group/:groupId
     - GET /group/:groupId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdGetWithRequestBuilder(groupId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /group/:groupId
     
     - parameter groupId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdPost(groupId: String, requestBody: [String: AnyCodable]) async throws {
        return try await groupGroupIdPostWithRequestBuilder(groupId: groupId, requestBody: requestBody).execute().body
    }

    /**
     POST /group/:groupId
     - POST /group/:groupId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdPostWithRequestBuilder(groupId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /group/:groupId/user/:userId
     
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdUserUserIdDelete(groupId: String, userId: String) async throws {
        return try await groupGroupIdUserUserIdDeleteWithRequestBuilder(groupId: groupId, userId: userId).execute().body
    }

    /**
     DELETE /group/:groupId/user/:userId
     - DELETE /group/:groupId/user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdUserUserIdDeleteWithRequestBuilder(groupId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId/user/:userId"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /group/:groupId/user/:userId
     
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupGroupIdUserUserIdPut(groupId: String, userId: String, user: User) async throws {
        return try await groupGroupIdUserUserIdPutWithRequestBuilder(groupId: groupId, userId: userId, user: user).execute().body
    }

    /**
     PUT /group/:groupId/user/:userId
     - PUT /group/:groupId/user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupGroupIdUserUserIdPutWithRequestBuilder(groupId: String, userId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/group/:groupId/user/:userId"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /group/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupPut(requestBody: [String: AnyCodable]) async throws {
        return try await groupPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /group/
     - PUT /group/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func groupPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/group/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /helper/status
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func helperStatusGet() async throws {
        return try await helperStatusGetWithRequestBuilder().execute().body
    }

    /**
     GET /helper/status
     - GET /helper/status
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func helperStatusGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/helper/status"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /helper/status/id/:statusName
     
     - parameter statusName: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func helperStatusIdStatusNameGet(statusName: String) async throws {
        return try await helperStatusIdStatusNameGetWithRequestBuilder(statusName: statusName).execute().body
    }

    /**
     GET /helper/status/id/:statusName
     - GET /helper/status/id/:statusName
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter statusName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func helperStatusIdStatusNameGetWithRequestBuilder(statusName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/helper/status/id/:statusName"
        let statusNamePreEscape = "\(APIHelper.mapValueToPathItem(statusName))"
        let statusNamePostEscape = statusNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{statusName}", with: statusNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /helper/status/object
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func helperStatusObjectGet() async throws {
        return try await helperStatusObjectGetWithRequestBuilder().execute().body
    }

    /**
     GET /helper/status/object
     - GET /helper/status/object
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func helperStatusObjectGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/helper/status/object"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /helper/status/object/:objectName
     
     - parameter objectName: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func helperStatusObjectObjectNameGet(objectName: String) async throws {
        return try await helperStatusObjectObjectNameGetWithRequestBuilder(objectName: objectName).execute().body
    }

    /**
     GET /helper/status/object/:objectName
     - GET /helper/status/object/:objectName
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter objectName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func helperStatusObjectObjectNameGetWithRequestBuilder(objectName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/helper/status/object/:objectName"
        let objectNamePreEscape = "\(APIHelper.mapValueToPathItem(objectName))"
        let objectNamePostEscape = objectNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{objectName}", with: objectNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /image/accept/:notificationId
     
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageAcceptNotificationIdGet(notificationId: String) async throws {
        return try await imageAcceptNotificationIdGetWithRequestBuilder(notificationId: notificationId).execute().body
    }

    /**
     GET /image/accept/:notificationId
     - GET /image/accept/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageAcceptNotificationIdGetWithRequestBuilder(notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/accept/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /image/file/:imageId
     
     - parameter imageId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageFileImageIdDelete(imageId: String) async throws {
        return try await imageFileImageIdDeleteWithRequestBuilder(imageId: imageId).execute().body
    }

    /**
     DELETE /image/file/:imageId
     - DELETE /image/file/:imageId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageFileImageIdDeleteWithRequestBuilder(imageId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/file/:imageId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /image/file/:imageId
     
     - parameter imageId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageFileImageIdPost(imageId: String, requestBody: [String: AnyCodable]) async throws {
        return try await imageFileImageIdPostWithRequestBuilder(imageId: imageId, requestBody: requestBody).execute().body
    }

    /**
     POST /image/file/:imageId
     - POST /image/file/:imageId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageFileImageIdPostWithRequestBuilder(imageId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/image/file/:imageId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /image/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageGet() async throws {
        return try await imageGetWithRequestBuilder().execute().body
    }

    /**
     GET /image/
     - GET /image/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func imageGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/image/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /image/:imageId
     
     - parameter imageId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageImageIdDelete(imageId: String) async throws {
        return try await imageImageIdDeleteWithRequestBuilder(imageId: imageId).execute().body
    }

    /**
     DELETE /image/:imageId
     - DELETE /image/:imageId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageImageIdDeleteWithRequestBuilder(imageId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/:imageId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /image/:imageId
     
     - parameter imageId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageImageIdGet(imageId: String) async throws {
        return try await imageImageIdGetWithRequestBuilder(imageId: imageId).execute().body
    }

    /**
     GET /image/:imageId
     - GET /image/:imageId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageImageIdGetWithRequestBuilder(imageId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/:imageId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /image/:imageId/notif/:notificationId
     
     - parameter imageId: (path)  
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageImageIdNotifNotificationIdGet(imageId: String, notificationId: String) async throws {
        return try await imageImageIdNotifNotificationIdGetWithRequestBuilder(imageId: imageId, notificationId: notificationId).execute().body
    }

    /**
     GET /image/:imageId/notif/:notificationId
     - GET /image/:imageId/notif/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageImageIdNotifNotificationIdGetWithRequestBuilder(imageId: String, notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/:imageId/notif/:notificationId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /image/:imageId
     
     - parameter imageId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageImageIdPost(imageId: String, requestBody: [String: AnyCodable]) async throws {
        return try await imageImageIdPostWithRequestBuilder(imageId: imageId, requestBody: requestBody).execute().body
    }

    /**
     POST /image/:imageId
     - POST /image/:imageId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageImageIdPostWithRequestBuilder(imageId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/image/:imageId"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /image/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imagePut(requestBody: [String: AnyCodable]) async throws {
        return try await imagePutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /image/
     - PUT /image/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func imagePutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/image/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /image/share/:imageId/recipient/:recipient
     
     - parameter imageId: (path)  
     - parameter recipient: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func imageShareImageIdRecipientRecipientGet(imageId: String, recipient: String) async throws {
        return try await imageShareImageIdRecipientRecipientGetWithRequestBuilder(imageId: imageId, recipient: recipient).execute().body
    }

    /**
     GET /image/share/:imageId/recipient/:recipient
     - GET /image/share/:imageId/recipient/:recipient
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter imageId: (path)  
     - parameter recipient: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func imageShareImageIdRecipientRecipientGetWithRequestBuilder(imageId: String, recipient: String) -> RequestBuilder<Void> {
        var localVariablePath = "/image/share/:imageId/recipient/:recipient"
        let imageIdPreEscape = "\(APIHelper.mapValueToPathItem(imageId))"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let recipientPreEscape = "\(APIHelper.mapValueToPathItem(recipient))"
        let recipientPostEscape = recipientPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{recipient}", with: recipientPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /item/accept/:notificationId
     
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemAcceptNotificationIdGet(notificationId: String) async throws {
        return try await itemAcceptNotificationIdGetWithRequestBuilder(notificationId: notificationId).execute().body
    }

    /**
     GET /item/accept/:notificationId
     - GET /item/accept/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemAcceptNotificationIdGetWithRequestBuilder(notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/item/accept/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /item/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemGet() async throws {
        return try await itemGetWithRequestBuilder().execute().body
    }

    /**
     GET /item/
     - GET /item/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func itemGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/item/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /item/:itemId
     
     - parameter itemId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemItemIdDelete(itemId: String) async throws {
        return try await itemItemIdDeleteWithRequestBuilder(itemId: itemId).execute().body
    }

    /**
     DELETE /item/:itemId
     - DELETE /item/:itemId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter itemId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemItemIdDeleteWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/item/:itemId"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /item/:itemId
     
     - parameter itemId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemItemIdGet(itemId: String) async throws {
        return try await itemItemIdGetWithRequestBuilder(itemId: itemId).execute().body
    }

    /**
     GET /item/:itemId
     - GET /item/:itemId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter itemId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemItemIdGetWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/item/:itemId"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /item/:itemId/notif/:notificationId
     
     - parameter itemId: (path)  
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemItemIdNotifNotificationIdGet(itemId: String, notificationId: String) async throws {
        return try await itemItemIdNotifNotificationIdGetWithRequestBuilder(itemId: itemId, notificationId: notificationId).execute().body
    }

    /**
     GET /item/:itemId/notif/:notificationId
     - GET /item/:itemId/notif/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter itemId: (path)  
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemItemIdNotifNotificationIdGetWithRequestBuilder(itemId: String, notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/item/:itemId/notif/:notificationId"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /item/:itemId
     
     - parameter itemId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemItemIdPost(itemId: String, requestBody: [String: AnyCodable]) async throws {
        return try await itemItemIdPostWithRequestBuilder(itemId: itemId, requestBody: requestBody).execute().body
    }

    /**
     POST /item/:itemId
     - POST /item/:itemId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter itemId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemItemIdPostWithRequestBuilder(itemId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/item/:itemId"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /item/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemPut(requestBody: [String: AnyCodable]) async throws {
        return try await itemPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /item/
     - PUT /item/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/item/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /item/share/:itemId/recipient/:recipient
     
     - parameter itemId: (path)  
     - parameter recipient: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func itemShareItemIdRecipientRecipientGet(itemId: String, recipient: String) async throws {
        return try await itemShareItemIdRecipientRecipientGetWithRequestBuilder(itemId: itemId, recipient: recipient).execute().body
    }

    /**
     GET /item/share/:itemId/recipient/:recipient
     - GET /item/share/:itemId/recipient/:recipient
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter itemId: (path)  
     - parameter recipient: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func itemShareItemIdRecipientRecipientGetWithRequestBuilder(itemId: String, recipient: String) -> RequestBuilder<Void> {
        var localVariablePath = "/item/share/:itemId/recipient/:recipient"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let recipientPreEscape = "\(APIHelper.mapValueToPathItem(recipient))"
        let recipientPostEscape = recipientPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{recipient}", with: recipientPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /list/accept/:notificationId
     
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listAcceptNotificationIdGet(notificationId: String) async throws {
        return try await listAcceptNotificationIdGetWithRequestBuilder(notificationId: notificationId).execute().body
    }

    /**
     GET /list/accept/:notificationId
     - GET /list/accept/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listAcceptNotificationIdGetWithRequestBuilder(notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/accept/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /list/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listGet() async throws {
        return try await listGetWithRequestBuilder().execute().body
    }

    /**
     GET /list/
     - GET /list/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func listGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/list/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /list/:listId/bulkitemadd
     
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdBulkitemaddPut(listId: String, requestBody: [String: AnyCodable]) async throws {
        return try await listListIdBulkitemaddPutWithRequestBuilder(listId: listId, requestBody: requestBody).execute().body
    }

    /**
     PUT /list/:listId/bulkitemadd
     - PUT /list/:listId/bulkitemadd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdBulkitemaddPutWithRequestBuilder(listId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId/bulkitemadd"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /list/:listId/bulkitemdel
     
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdBulkitemdelPut(listId: String, requestBody: [String: AnyCodable]) async throws {
        return try await listListIdBulkitemdelPutWithRequestBuilder(listId: listId, requestBody: requestBody).execute().body
    }

    /**
     PUT /list/:listId/bulkitemdel
     - PUT /list/:listId/bulkitemdel
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdBulkitemdelPutWithRequestBuilder(listId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId/bulkitemdel"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /list/:listId
     
     - parameter listId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdDelete(listId: String) async throws {
        return try await listListIdDeleteWithRequestBuilder(listId: listId).execute().body
    }

    /**
     DELETE /list/:listId
     - DELETE /list/:listId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdDeleteWithRequestBuilder(listId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /list/:listId
     
     - parameter listId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdGet(listId: String) async throws {
        return try await listListIdGetWithRequestBuilder(listId: listId).execute().body
    }

    /**
     GET /list/:listId
     - GET /list/:listId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdGetWithRequestBuilder(listId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /list/:listId/item/:itemId
     
     - parameter listId: (path)  
     - parameter itemId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdItemItemIdDelete(listId: String, itemId: String) async throws {
        return try await listListIdItemItemIdDeleteWithRequestBuilder(listId: listId, itemId: itemId).execute().body
    }

    /**
     DELETE /list/:listId/item/:itemId
     - DELETE /list/:listId/item/:itemId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter itemId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdItemItemIdDeleteWithRequestBuilder(listId: String, itemId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId/item/:itemId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /list/:listId/item/:itemId
     
     - parameter listId: (path)  
     - parameter itemId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdItemItemIdPut(listId: String, itemId: String, requestBody: [String: AnyCodable]) async throws {
        return try await listListIdItemItemIdPutWithRequestBuilder(listId: listId, itemId: itemId, requestBody: requestBody).execute().body
    }

    /**
     PUT /list/:listId/item/:itemId
     - PUT /list/:listId/item/:itemId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter itemId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdItemItemIdPutWithRequestBuilder(listId: String, itemId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId/item/:itemId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /list/:listId/notif/:notificationId
     
     - parameter listId: (path)  
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdNotifNotificationIdGet(listId: String, notificationId: String) async throws {
        return try await listListIdNotifNotificationIdGetWithRequestBuilder(listId: listId, notificationId: notificationId).execute().body
    }

    /**
     GET /list/:listId/notif/:notificationId
     - GET /list/:listId/notif/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdNotifNotificationIdGetWithRequestBuilder(listId: String, notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId/notif/:notificationId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /list/:listId
     
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listListIdPost(listId: String, requestBody: [String: AnyCodable]) async throws {
        return try await listListIdPostWithRequestBuilder(listId: listId, requestBody: requestBody).execute().body
    }

    /**
     POST /list/:listId
     - POST /list/:listId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func listListIdPostWithRequestBuilder(listId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/list/:listId"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /list/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listPut(requestBody: [String: AnyCodable]) async throws {
        return try await listPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /list/
     - PUT /list/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func listPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/list/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /list/share/:listId/recipient/:recipient
     
     - parameter listId: (path)  
     - parameter recipient: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listShareListIdRecipientRecipientGet(listId: String, recipient: String) async throws {
        return try await listShareListIdRecipientRecipientGetWithRequestBuilder(listId: listId, recipient: recipient).execute().body
    }

    /**
     GET /list/share/:listId/recipient/:recipient
     - GET /list/share/:listId/recipient/:recipient
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter listId: (path)  
     - parameter recipient: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func listShareListIdRecipientRecipientGetWithRequestBuilder(listId: String, recipient: String) -> RequestBuilder<Void> {
        var localVariablePath = "/list/share/:listId/recipient/:recipient"
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{listId}", with: listIdPostEscape, options: .literal, range: nil)
        let recipientPreEscape = "\(APIHelper.mapValueToPathItem(recipient))"
        let recipientPostEscape = recipientPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{recipient}", with: recipientPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /login/2fa
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func login2faGet() async throws {
        return try await login2faGetWithRequestBuilder().execute().body
    }

    /**
     GET /login/2fa
     - GET /login/2fa
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func login2faGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/login/2fa"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /login/gentoken
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginGentokenGet() async throws {
        return try await loginGentokenGetWithRequestBuilder().execute().body
    }

    /**
     GET /login/gentoken
     - GET /login/gentoken
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func loginGentokenGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/login/gentoken"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /login/password/:userid
     
     - parameter userid: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginPasswordUseridPut(userid: String, user: User) async throws {
        return try await loginPasswordUseridPutWithRequestBuilder(userid: userid, user: user).execute().body
    }

    /**
     PUT /login/password/:userid
     - PUT /login/password/:userid
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userid: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginPasswordUseridPutWithRequestBuilder(userid: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/login/password/:userid"
        let useridPreEscape = "\(APIHelper.mapValueToPathItem(userid))"
        let useridPostEscape = useridPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userid}", with: useridPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /login/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginPost(requestBody: [String: AnyCodable]) async throws {
        return try await loginPostWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     POST /login/
     - POST /login/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginPostWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/login/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /login/refresh
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginRefreshPost(requestBody: [String: AnyCodable]) async throws {
        return try await loginRefreshPostWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     POST /login/refresh
     - POST /login/refresh
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginRefreshPostWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/login/refresh"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /login/resetreq
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginResetreqPost(requestBody: [String: AnyCodable]) async throws {
        return try await loginResetreqPostWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     POST /login/resetreq
     - POST /login/resetreq
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginResetreqPostWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/login/resetreq"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /login/verify2fa
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginVerify2faPost(requestBody: [String: AnyCodable]) async throws {
        return try await loginVerify2faPostWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     POST /login/verify2fa
     - POST /login/verify2fa
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func loginVerify2faPostWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/login/verify2fa"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /notification/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationGet() async throws {
        return try await notificationGetWithRequestBuilder().execute().body
    }

    /**
     GET /notification/
     - GET /notification/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func notificationGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/notification/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /notification/:notificationId
     
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationNotificationIdDelete(notificationId: String) async throws {
        return try await notificationNotificationIdDeleteWithRequestBuilder(notificationId: notificationId).execute().body
    }

    /**
     DELETE /notification/:notificationId
     - DELETE /notification/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func notificationNotificationIdDeleteWithRequestBuilder(notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/notification/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /notification/:notificationId
     
     - parameter notificationId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationNotificationIdGet(notificationId: String) async throws {
        return try await notificationNotificationIdGetWithRequestBuilder(notificationId: notificationId).execute().body
    }

    /**
     GET /notification/:notificationId
     - GET /notification/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func notificationNotificationIdGetWithRequestBuilder(notificationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/notification/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /notification/:notificationId
     
     - parameter notificationId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationNotificationIdPost(notificationId: String, requestBody: [String: AnyCodable]) async throws {
        return try await notificationNotificationIdPostWithRequestBuilder(notificationId: notificationId, requestBody: requestBody).execute().body
    }

    /**
     POST /notification/:notificationId
     - POST /notification/:notificationId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func notificationNotificationIdPostWithRequestBuilder(notificationId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/notification/:notificationId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /notification/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationPut(requestBody: [String: AnyCodable]) async throws {
        return try await notificationPutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /notification/
     - PUT /notification/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func notificationPutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/notification/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /notification/status/:notificationId/:statusId
     
     - parameter notificationId: (path)  
     - parameter statusId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationStatusNotificationIdStatusIdPut(notificationId: String, statusId: String, requestBody: [String: AnyCodable]) async throws {
        return try await notificationStatusNotificationIdStatusIdPutWithRequestBuilder(notificationId: notificationId, statusId: statusId, requestBody: requestBody).execute().body
    }

    /**
     PUT /notification/status/:notificationId/:statusId
     - PUT /notification/status/:notificationId/:statusId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter notificationId: (path)  
     - parameter statusId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func notificationStatusNotificationIdStatusIdPutWithRequestBuilder(notificationId: String, statusId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/notification/status/:notificationId/:statusId"
        let notificationIdPreEscape = "\(APIHelper.mapValueToPathItem(notificationId))"
        let notificationIdPostEscape = notificationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{notificationId}", with: notificationIdPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(APIHelper.mapValueToPathItem(statusId))"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /notification/unreadcount
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func notificationUnreadcountGet() async throws {
        return try await notificationUnreadcountGetWithRequestBuilder().execute().body
    }

    /**
     GET /notification/unreadcount
     - GET /notification/unreadcount
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func notificationUnreadcountGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/notification/unreadcount"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /preference/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func preferenceGet() async throws {
        return try await preferenceGetWithRequestBuilder().execute().body
    }

    /**
     GET /preference/
     - GET /preference/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func preferenceGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/preference/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /preference/:preferenceName
     
     - parameter preferenceName: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func preferencePreferenceNameDelete(preferenceName: String) async throws {
        return try await preferencePreferenceNameDeleteWithRequestBuilder(preferenceName: preferenceName).execute().body
    }

    /**
     DELETE /preference/:preferenceName
     - DELETE /preference/:preferenceName
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter preferenceName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func preferencePreferenceNameDeleteWithRequestBuilder(preferenceName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/preference/:preferenceName"
        let preferenceNamePreEscape = "\(APIHelper.mapValueToPathItem(preferenceName))"
        let preferenceNamePostEscape = preferenceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{preferenceName}", with: preferenceNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /preference/:preferenceName
     
     - parameter preferenceName: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func preferencePreferenceNameGet(preferenceName: String) async throws {
        return try await preferencePreferenceNameGetWithRequestBuilder(preferenceName: preferenceName).execute().body
    }

    /**
     GET /preference/:preferenceName
     - GET /preference/:preferenceName
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter preferenceName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func preferencePreferenceNameGetWithRequestBuilder(preferenceName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/preference/:preferenceName"
        let preferenceNamePreEscape = "\(APIHelper.mapValueToPathItem(preferenceName))"
        let preferenceNamePostEscape = preferenceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{preferenceName}", with: preferenceNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /preference/:preferenceName
     
     - parameter preferenceName: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func preferencePreferenceNamePost(preferenceName: String, requestBody: [String: AnyCodable]) async throws {
        return try await preferencePreferenceNamePostWithRequestBuilder(preferenceName: preferenceName, requestBody: requestBody).execute().body
    }

    /**
     POST /preference/:preferenceName
     - POST /preference/:preferenceName
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter preferenceName: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func preferencePreferenceNamePostWithRequestBuilder(preferenceName: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/preference/:preferenceName"
        let preferenceNamePreEscape = "\(APIHelper.mapValueToPathItem(preferenceName))"
        let preferenceNamePostEscape = preferenceNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{preferenceName}", with: preferenceNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /preference/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func preferencePut(requestBody: [String: AnyCodable]) async throws {
        return try await preferencePutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /preference/
     - PUT /preference/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func preferencePutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/preference/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /register/confirm/:tokenId
     
     - parameter tokenId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerConfirmTokenIdGet(tokenId: String) async throws {
        return try await registerConfirmTokenIdGetWithRequestBuilder(tokenId: tokenId).execute().body
    }

    /**
     GET /register/confirm/:tokenId
     - GET /register/confirm/:tokenId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func registerConfirmTokenIdGetWithRequestBuilder(tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/register/confirm/:tokenId"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /register/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerPost(requestBody: [String: AnyCodable]) async throws {
        return try await registerPostWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     POST /register/
     - POST /register/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func registerPostWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/register/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /role/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleGet() async throws {
        return try await roleGetWithRequestBuilder().execute().body
    }

    /**
     GET /role/
     - GET /role/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func roleGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/role/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolePut(requestBody: [String: AnyCodable]) async throws {
        return try await rolePutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /role/
     - PUT /role/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func rolePutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/role/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/bulkcapadd
     
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdBulkcapaddPut(roleId: String, requestBody: [String: AnyCodable]) async throws {
        return try await roleRoleIdBulkcapaddPutWithRequestBuilder(roleId: roleId, requestBody: requestBody).execute().body
    }

    /**
     PUT /role/:roleId/bulkcapadd
     - PUT /role/:roleId/bulkcapadd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdBulkcapaddPutWithRequestBuilder(roleId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/bulkcapadd"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/bulkcapdel
     
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdBulkcapdelPut(roleId: String, requestBody: [String: AnyCodable]) async throws {
        return try await roleRoleIdBulkcapdelPutWithRequestBuilder(roleId: roleId, requestBody: requestBody).execute().body
    }

    /**
     PUT /role/:roleId/bulkcapdel
     - PUT /role/:roleId/bulkcapdel
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdBulkcapdelPutWithRequestBuilder(roleId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/bulkcapdel"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/bulkuseradd
     
     - parameter roleId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdBulkuseraddPut(roleId: String, user: User) async throws {
        return try await roleRoleIdBulkuseraddPutWithRequestBuilder(roleId: roleId, user: user).execute().body
    }

    /**
     PUT /role/:roleId/bulkuseradd
     - PUT /role/:roleId/bulkuseradd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdBulkuseraddPutWithRequestBuilder(roleId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/bulkuseradd"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/bulkuserdel
     
     - parameter roleId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdBulkuserdelPut(roleId: String, user: User) async throws {
        return try await roleRoleIdBulkuserdelPutWithRequestBuilder(roleId: roleId, user: user).execute().body
    }

    /**
     PUT /role/:roleId/bulkuserdel
     - PUT /role/:roleId/bulkuserdel
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdBulkuserdelPutWithRequestBuilder(roleId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/bulkuserdel"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /role/:roleId/cap/:capabilityId
     
     - parameter roleId: (path)  
     - parameter capabilityId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdCapCapabilityIdDelete(roleId: String, capabilityId: String) async throws {
        return try await roleRoleIdCapCapabilityIdDeleteWithRequestBuilder(roleId: roleId, capabilityId: capabilityId).execute().body
    }

    /**
     DELETE /role/:roleId/cap/:capabilityId
     - DELETE /role/:roleId/cap/:capabilityId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter capabilityId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdCapCapabilityIdDeleteWithRequestBuilder(roleId: String, capabilityId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/cap/:capabilityId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let capabilityIdPreEscape = "\(APIHelper.mapValueToPathItem(capabilityId))"
        let capabilityIdPostEscape = capabilityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{capabilityId}", with: capabilityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/cap/:capabilityId
     
     - parameter roleId: (path)  
     - parameter capabilityId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdCapCapabilityIdPut(roleId: String, capabilityId: String, requestBody: [String: AnyCodable]) async throws {
        return try await roleRoleIdCapCapabilityIdPutWithRequestBuilder(roleId: roleId, capabilityId: capabilityId, requestBody: requestBody).execute().body
    }

    /**
     PUT /role/:roleId/cap/:capabilityId
     - PUT /role/:roleId/cap/:capabilityId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter capabilityId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdCapCapabilityIdPutWithRequestBuilder(roleId: String, capabilityId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/cap/:capabilityId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let capabilityIdPreEscape = "\(APIHelper.mapValueToPathItem(capabilityId))"
        let capabilityIdPostEscape = capabilityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{capabilityId}", with: capabilityIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /role/:roleId
     
     - parameter roleId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdDelete(roleId: String) async throws {
        return try await roleRoleIdDeleteWithRequestBuilder(roleId: roleId).execute().body
    }

    /**
     DELETE /role/:roleId
     - DELETE /role/:roleId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdDeleteWithRequestBuilder(roleId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /role/:roleId
     
     - parameter roleId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdGet(roleId: String) async throws {
        return try await roleRoleIdGetWithRequestBuilder(roleId: roleId).execute().body
    }

    /**
     GET /role/:roleId
     - GET /role/:roleId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdGetWithRequestBuilder(roleId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /role/:roleId
     
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdPost(roleId: String, requestBody: [String: AnyCodable]) async throws {
        return try await roleRoleIdPostWithRequestBuilder(roleId: roleId, requestBody: requestBody).execute().body
    }

    /**
     POST /role/:roleId
     - POST /role/:roleId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdPostWithRequestBuilder(roleId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /role/:roleId/user/:userId
     
     - parameter roleId: (path)  
     - parameter userId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdUserUserIdDelete(roleId: String, userId: String) async throws {
        return try await roleRoleIdUserUserIdDeleteWithRequestBuilder(roleId: roleId, userId: userId).execute().body
    }

    /**
     DELETE /role/:roleId/user/:userId
     - DELETE /role/:roleId/user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdUserUserIdDeleteWithRequestBuilder(roleId: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/user/:userId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /role/:roleId/user/:userId
     
     - parameter roleId: (path)  
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func roleRoleIdUserUserIdPut(roleId: String, userId: String, user: User) async throws {
        return try await roleRoleIdUserUserIdPutWithRequestBuilder(roleId: roleId, userId: userId, user: user).execute().body
    }

    /**
     PUT /role/:roleId/user/:userId
     - PUT /role/:roleId/user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter roleId: (path)  
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func roleRoleIdUserUserIdPutWithRequestBuilder(roleId: String, userId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/role/:roleId/user/:userId"
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /user/accept/:tokenId
     
     - parameter tokenId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userAcceptTokenIdGet(tokenId: String) async throws {
        return try await userAcceptTokenIdGetWithRequestBuilder(tokenId: tokenId).execute().body
    }

    /**
     GET /user/accept/:tokenId
     - GET /user/accept/:tokenId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userAcceptTokenIdGetWithRequestBuilder(tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/accept/:tokenId"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /user/block/:blockUser
     
     - parameter blockUser: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userBlockBlockUserPut(blockUser: String, user: User) async throws {
        return try await userBlockBlockUserPutWithRequestBuilder(blockUser: blockUser, user: user).execute().body
    }

    /**
     PUT /user/block/:blockUser
     - PUT /user/block/:blockUser
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter blockUser: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userBlockBlockUserPutWithRequestBuilder(blockUser: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/user/block/:blockUser"
        let blockUserPreEscape = "\(APIHelper.mapValueToPathItem(blockUser))"
        let blockUserPostEscape = blockUserPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockUser}", with: blockUserPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/friend/:friendId
     
     - parameter friendId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userFriendFriendIdDelete(friendId: String) async throws {
        return try await userFriendFriendIdDeleteWithRequestBuilder(friendId: friendId).execute().body
    }

    /**
     DELETE /user/friend/:friendId
     - DELETE /user/friend/:friendId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter friendId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userFriendFriendIdDeleteWithRequestBuilder(friendId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/friend/:friendId"
        let friendIdPreEscape = "\(APIHelper.mapValueToPathItem(friendId))"
        let friendIdPostEscape = friendIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{friendId}", with: friendIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /user/friend
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userFriendGet() async throws {
        return try await userFriendGetWithRequestBuilder().execute().body
    }

    /**
     GET /user/friend
     - GET /user/friend
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func userFriendGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/user/friend"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /user/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userGet() async throws {
        return try await userGetWithRequestBuilder().execute().body
    }

    /**
     GET /user/
     - GET /user/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func userGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/user/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /user/
     
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userPut(user: User) async throws {
        return try await userPutWithRequestBuilder(user: user).execute().body
    }

    /**
     PUT /user/
     - PUT /user/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userPutWithRequestBuilder(user: User) -> RequestBuilder<Void> {
        let localVariablePath = "/user/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/relationship/:relationshipId
     
     - parameter relationshipId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userRelationshipRelationshipIdDelete(relationshipId: String) async throws {
        return try await userRelationshipRelationshipIdDeleteWithRequestBuilder(relationshipId: relationshipId).execute().body
    }

    /**
     DELETE /user/relationship/:relationshipId
     - DELETE /user/relationship/:relationshipId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter relationshipId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userRelationshipRelationshipIdDeleteWithRequestBuilder(relationshipId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/relationship/:relationshipId"
        let relationshipIdPreEscape = "\(APIHelper.mapValueToPathItem(relationshipId))"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /user/request/:friendId
     
     - parameter friendId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userRequestFriendIdPost(friendId: String, user: User) async throws {
        return try await userRequestFriendIdPostWithRequestBuilder(friendId: friendId, user: user).execute().body
    }

    /**
     POST /user/request/:friendId
     - POST /user/request/:friendId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter friendId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userRequestFriendIdPostWithRequestBuilder(friendId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/user/request/:friendId"
        let friendIdPreEscape = "\(APIHelper.mapValueToPathItem(friendId))"
        let friendIdPostEscape = friendIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{friendId}", with: friendIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /user/request
     
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userRequestPost(user: User) async throws {
        return try await userRequestPostWithRequestBuilder(user: user).execute().body
    }

    /**
     POST /user/request
     - POST /user/request
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userRequestPostWithRequestBuilder(user: User) -> RequestBuilder<Void> {
        let localVariablePath = "/user/request"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /user/:userId/block/:blockUser
     
     - parameter userId: (path)  
     - parameter blockUser: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdBlockBlockUserPut(userId: String, blockUser: String, user: User) async throws {
        return try await userUserIdBlockBlockUserPutWithRequestBuilder(userId: userId, blockUser: blockUser, user: user).execute().body
    }

    /**
     PUT /user/:userId/block/:blockUser
     - PUT /user/:userId/block/:blockUser
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter blockUser: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdBlockBlockUserPutWithRequestBuilder(userId: String, blockUser: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/block/:blockUser"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let blockUserPreEscape = "\(APIHelper.mapValueToPathItem(blockUser))"
        let blockUserPostEscape = blockUserPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockUser}", with: blockUserPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/:userId
     
     - parameter userId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdDelete(userId: String) async throws {
        return try await userUserIdDeleteWithRequestBuilder(userId: userId).execute().body
    }

    /**
     DELETE /user/:userId
     - DELETE /user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdDeleteWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/:userId/friend/:friendId
     
     - parameter userId: (path)  
     - parameter friendId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdFriendFriendIdDelete(userId: String, friendId: String) async throws {
        return try await userUserIdFriendFriendIdDeleteWithRequestBuilder(userId: userId, friendId: friendId).execute().body
    }

    /**
     DELETE /user/:userId/friend/:friendId
     - DELETE /user/:userId/friend/:friendId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter friendId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdFriendFriendIdDeleteWithRequestBuilder(userId: String, friendId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/friend/:friendId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let friendIdPreEscape = "\(APIHelper.mapValueToPathItem(friendId))"
        let friendIdPostEscape = friendIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{friendId}", with: friendIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /user/:userId/friend/:friendId
     
     - parameter userId: (path)  
     - parameter friendId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdFriendFriendIdPut(userId: String, friendId: String, user: User) async throws {
        return try await userUserIdFriendFriendIdPutWithRequestBuilder(userId: userId, friendId: friendId, user: user).execute().body
    }

    /**
     PUT /user/:userId/friend/:friendId
     - PUT /user/:userId/friend/:friendId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter friendId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdFriendFriendIdPutWithRequestBuilder(userId: String, friendId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/friend/:friendId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let friendIdPreEscape = "\(APIHelper.mapValueToPathItem(friendId))"
        let friendIdPostEscape = friendIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{friendId}", with: friendIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /user/:userId/friend
     
     - parameter userId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdFriendGet(userId: String) async throws {
        return try await userUserIdFriendGetWithRequestBuilder(userId: userId).execute().body
    }

    /**
     GET /user/:userId/friend
     - GET /user/:userId/friend
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdFriendGetWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/friend"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /user/:userId
     
     - parameter userId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdGet(userId: String) async throws {
        return try await userUserIdGetWithRequestBuilder(userId: userId).execute().body
    }

    /**
     GET /user/:userId
     - GET /user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdGetWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /user/:userId
     
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdPost(userId: String, user: User) async throws {
        return try await userUserIdPostWithRequestBuilder(userId: userId, user: user).execute().body
    }

    /**
     POST /user/:userId
     - POST /user/:userId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter user: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdPostWithRequestBuilder(userId: String, user: User) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/:userId/reassign/:ownerId
     
     - parameter userId: (path)  
     - parameter ownerId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdReassignOwnerIdDelete(userId: String, ownerId: String) async throws {
        return try await userUserIdReassignOwnerIdDeleteWithRequestBuilder(userId: userId, ownerId: ownerId).execute().body
    }

    /**
     DELETE /user/:userId/reassign/:ownerId
     - DELETE /user/:userId/reassign/:ownerId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter ownerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdReassignOwnerIdDeleteWithRequestBuilder(userId: String, ownerId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/reassign/:ownerId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let ownerIdPreEscape = "\(APIHelper.mapValueToPathItem(ownerId))"
        let ownerIdPostEscape = ownerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ownerId}", with: ownerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     DELETE /user/:userId/relationship/:relationshipId
     
     - parameter userId: (path)  
     - parameter relationshipId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userUserIdRelationshipRelationshipIdDelete(userId: String, relationshipId: String) async throws {
        return try await userUserIdRelationshipRelationshipIdDeleteWithRequestBuilder(userId: userId, relationshipId: relationshipId).execute().body
    }

    /**
     DELETE /user/:userId/relationship/:relationshipId
     - DELETE /user/:userId/relationship/:relationshipId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter userId: (path)  
     - parameter relationshipId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func userUserIdRelationshipRelationshipIdDeleteWithRequestBuilder(userId: String, relationshipId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/user/:userId/relationship/:relationshipId"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let relationshipIdPreEscape = "\(APIHelper.mapValueToPathItem(relationshipId))"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /vote/election/:electionId
     
     - parameter electionId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteElectionElectionIdGet(electionId: String) async throws {
        return try await voteElectionElectionIdGetWithRequestBuilder(electionId: electionId).execute().body
    }

    /**
     GET /vote/election/:electionId
     - GET /vote/election/:electionId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func voteElectionElectionIdGetWithRequestBuilder(electionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/vote/election/:electionId"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /vote/:electionId/next
     
     - parameter electionId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteElectionIdNextGet(electionId: String) async throws {
        return try await voteElectionIdNextGetWithRequestBuilder(electionId: electionId).execute().body
    }

    /**
     GET /vote/:electionId/next
     - GET /vote/:electionId/next
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter electionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func voteElectionIdNextGetWithRequestBuilder(electionId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/vote/:electionId/next"
        let electionIdPreEscape = "\(APIHelper.mapValueToPathItem(electionId))"
        let electionIdPostEscape = electionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{electionId}", with: electionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /vote/
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteGet() async throws {
        return try await voteGetWithRequestBuilder().execute().body
    }

    /**
     GET /vote/
     - GET /vote/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func voteGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/vote/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /vote/next/all
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteNextAllGet() async throws {
        return try await voteNextAllGetWithRequestBuilder().execute().body
    }

    /**
     GET /vote/next/all
     - GET /vote/next/all
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func voteNextAllGetWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/vote/next/all"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     PUT /vote/
     
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func votePut(requestBody: [String: AnyCodable]) async throws {
        return try await votePutWithRequestBuilder(requestBody: requestBody).execute().body
    }

    /**
     PUT /vote/
     - PUT /vote/
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func votePutWithRequestBuilder(requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        let localVariablePath = "/vote/"
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GET /vote/:voteId
     
     - parameter voteId: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteVoteIdGet(voteId: String) async throws {
        return try await voteVoteIdGetWithRequestBuilder(voteId: voteId).execute().body
    }

    /**
     GET /vote/:voteId
     - GET /vote/:voteId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter voteId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func voteVoteIdGetWithRequestBuilder(voteId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/vote/:voteId"
        let voteIdPreEscape = "\(APIHelper.mapValueToPathItem(voteId))"
        let voteIdPostEscape = voteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{voteId}", with: voteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     POST /vote/:voteId
     
     - parameter voteId: (path)  
     - parameter requestBody: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func voteVoteIdPost(voteId: String, requestBody: [String: AnyCodable]) async throws {
        return try await voteVoteIdPostWithRequestBuilder(voteId: voteId, requestBody: requestBody).execute().body
    }

    /**
     POST /vote/:voteId
     - POST /vote/:voteId
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter voteId: (path)  
     - parameter requestBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func voteVoteIdPostWithRequestBuilder(voteId: String, requestBody: [String: AnyCodable]) -> RequestBuilder<Void> {
        var localVariablePath = "/vote/:voteId"
        let voteIdPreEscape = "\(APIHelper.mapValueToPathItem(voteId))"
        let voteIdPostEscape = voteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{voteId}", with: voteIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = WotlweduAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = WotlweduAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
